// <auto-generated />
using System;
using Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(FilmDiaryContext))]
    partial class FilmDiaryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Actor", b =>
                {
                    b.Property<int>("ActorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Actor_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActorId"));

                    b.Property<string>("Bio")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("Birth_date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("First_name");

                    b.Property<short?>("Height")
                        .HasColumnType("smallint");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Last_name");

                    b.Property<string>("Nationality")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Photo_url");

                    b.HasKey("ActorId")
                        .HasName("PK__Actor__E5771745101C27C0");

                    b.HasIndex("Nationality");

                    b.ToTable("Actor", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Country", b =>
                {
                    b.Property<string>("CountryCode")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("Country_code")
                        .IsFixedLength();

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Country_name");

                    b.HasKey("CountryCode")
                        .HasName("PK__Country__73B286F47544956F");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Customer_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Banner")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Bio")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("Birth_date");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("Country_code")
                        .IsFixedLength();

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("Created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Deleted_at")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int")
                        .HasColumnName("Deleted_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("First_name");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Last_name");

                    b.Property<string>("Pass")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<short>("RoleId")
                        .HasColumnType("smallint")
                        .HasColumnName("Role_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Updated_at")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("Updated_by");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.HasKey("CustomerId")
                        .HasName("PK__Customer__8CB382B17C1748B9");

                    b.HasIndex("CountryCode");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Friendship", b =>
                {
                    b.Property<int>("RequesterId")
                        .HasColumnType("int")
                        .HasColumnName("Requester_id");

                    b.Property<int>("AddresseeId")
                        .HasColumnType("int")
                        .HasColumnName("Addressee_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("RequesterId", "AddresseeId")
                        .HasName("PK__Friendsh__D58EA5D95B7E0C5D");

                    b.HasIndex("AddresseeId");

                    b.ToTable("Friendship", (string)null);
                });

            modelBuilder.Entity("Domain.Models.FriendshipStatus", b =>
                {
                    b.Property<int>("RequesterId")
                        .HasColumnType("int")
                        .HasColumnName("Requester_id");

                    b.Property<int>("AddresseeId")
                        .HasColumnType("int")
                        .HasColumnName("Addressee_id");

                    b.Property<DateTime>("SpecifiedDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Specified_datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("SpecifiedId")
                        .HasColumnType("int")
                        .HasColumnName("Specified_id");

                    b.Property<string>("StatusCode")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("Status_code")
                        .IsFixedLength();

                    b.HasKey("RequesterId", "AddresseeId", "SpecifiedDatetime")
                        .HasName("PK__Friendsh__48CE34DB9DA1E626");

                    b.HasIndex("SpecifiedId");

                    b.HasIndex("StatusCode");

                    b.ToTable("Friendship_Status", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Genre_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("GenreId")
                        .HasName("Genre_PK");

                    b.ToTable("Genre", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Language_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("LanguageId")
                        .HasName("Language_PK");

                    b.ToTable("Language", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Movie_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieId"));

                    b.Property<long?>("Budget")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("Created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Deleted_at")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int")
                        .HasColumnName("Deleted_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsAiring")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Airing");

                    b.Property<string>("PosterUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Poster_url");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("date")
                        .HasColumnName("Release_date");

                    b.Property<long?>("Revenue")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Updated_at")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("Updated_by");

                    b.HasKey("MovieId")
                        .HasName("PK__Movie__7A89F80D328DAFCC");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("Rating");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Movie", (string)null);
                });

            modelBuilder.Entity("Domain.Models.MovieCast", b =>
                {
                    b.Property<int>("ActorId")
                        .HasColumnType("int")
                        .HasColumnName("Actor_id");

                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("Movie_id");

                    b.Property<string>("CharacterName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("Character_name");

                    b.HasKey("ActorId", "MovieId")
                        .HasName("PK__Movie_Ca__22DF88C5305CD3F4");

                    b.HasIndex("MovieId");

                    b.ToTable("Movie_Cast", (string)null);
                });

            modelBuilder.Entity("Domain.Models.MovieRating", b =>
                {
                    b.Property<int>("MovieRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Movie_Rating_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieRatingId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("MovieRatingId")
                        .HasName("Movie_Rating_PK");

                    b.ToTable("Movie_Rating", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Review_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("Created_by");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("Customer_Id");

                    b.Property<DateTime?>("DeletedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Deleted_at")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int")
                        .HasColumnName("Deleted_by");

                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("Movie_Id");

                    b.Property<string>("ReviewContent")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)")
                        .HasColumnName("Review_Content");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Updated_at")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("Updated_by");

                    b.HasKey("ReviewId")
                        .HasName("Review_PK");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("MovieId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Role", b =>
                {
                    b.Property<short>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Role_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("RoleId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Deleted_at")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Updated_at")
                        .HasDefaultValueSql("(NULL)");

                    b.HasKey("RoleId")
                        .HasName("PK__Role__D80BB0938ABB21FC");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Staff_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<string>("Bio")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("Birth_date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("First_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Last_name");

                    b.Property<string>("Nationality")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<int>("StaffRoleId")
                        .HasColumnType("int")
                        .HasColumnName("Staff_role_id");

                    b.HasKey("StaffId")
                        .HasName("PK__Staff__32D2E85B7C4AD946");

                    b.HasIndex("Nationality");

                    b.HasIndex("StaffRoleId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("Domain.Models.StaffRole", b =>
                {
                    b.Property<int>("StaffRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Staff_role_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffRoleId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("StaffRoleId")
                        .HasName("PK__Staff_Ro__337A625B3241C4E4");

                    b.ToTable("Staff_Role", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Status", b =>
                {
                    b.Property<string>("StatusCode")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("Status_code")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("StatusCode")
                        .HasName("PK__Status__A3EABA77740422EB");

                    b.ToTable("Status", (string)null);
                });

            modelBuilder.Entity("Domain.Models.UserList", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("Customer_Id");

                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("Movie_Id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("Created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Deleted_at")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int")
                        .HasColumnName("Deleted_by");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Favorite");

                    b.Property<byte?>("MovieScore")
                        .HasColumnType("tinyint")
                        .HasColumnName("Movie_Score");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Updated_at")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("Updated_by");

                    b.Property<int>("UserListStatusId")
                        .HasColumnType("int")
                        .HasColumnName("User_List_Status_Id");

                    b.HasKey("CustomerId", "MovieId")
                        .HasName("User_List_PK");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("MovieId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserListStatusId");

                    b.ToTable("User_List", (string)null);
                });

            modelBuilder.Entity("Domain.Models.UserListStatus", b =>
                {
                    b.Property<int>("UserListStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_List_Status_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserListStatusId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserListStatusId")
                        .HasName("User_List_Status_PK");

                    b.ToTable("User_List_Status", (string)null);
                });

            modelBuilder.Entity("MovieGenre", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("Movie_Id");

                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("Genre_Id");

                    b.HasKey("MovieId", "GenreId")
                        .HasName("Movie_Genres_PK");

                    b.HasIndex("GenreId");

                    b.ToTable("Movie_Genres", (string)null);
                });

            modelBuilder.Entity("MovieLanguage", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("Movie_Id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("Language_Id");

                    b.HasKey("MovieId", "LanguageId")
                        .HasName("Movie_Languages_PK");

                    b.HasIndex("LanguageId");

                    b.ToTable("Movie_Languages", (string)null);
                });

            modelBuilder.Entity("MovieStaff", b =>
                {
                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("Staff_id");

                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("Movie_id");

                    b.HasKey("StaffId", "MovieId")
                        .HasName("PK__Movie_St__F57A77DBD029D42B");

                    b.HasIndex("MovieId");

                    b.ToTable("Movie_Staff", (string)null);
                });

            modelBuilder.Entity("ProductionCountry", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("Movie_Id");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("Country_code")
                        .IsFixedLength();

                    b.HasKey("MovieId", "CountryCode")
                        .HasName("Production_Country_PK");

                    b.HasIndex("CountryCode");

                    b.ToTable("Production_Country", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Actor", b =>
                {
                    b.HasOne("Domain.Models.Country", "NationalityNavigation")
                        .WithMany("Actors")
                        .HasForeignKey("Nationality")
                        .HasConstraintName("FK__Actor__Nationali__59FA5E80");

                    b.Navigation("NationalityNavigation");
                });

            modelBuilder.Entity("Domain.Models.Customer", b =>
                {
                    b.HasOne("Domain.Models.Country", "CountryCodeNavigation")
                        .WithMany("Customers")
                        .HasForeignKey("CountryCode")
                        .HasConstraintName("FK__Customer__Countr__3E52440B");

                    b.HasOne("Domain.Models.Customer", "CreatedByNavigation")
                        .WithMany("InverseCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__Customer__Create__4316F928");

                    b.HasOne("Domain.Models.Customer", "DeletedByNavigation")
                        .WithMany("InverseDeletedByNavigation")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__Customer__Delete__44FF419A");

                    b.HasOne("Domain.Models.Role", "Role")
                        .WithMany("Customers")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__Customer__Role_i__3F466844");

                    b.HasOne("Domain.Models.Customer", "UpdatedByNavigation")
                        .WithMany("InverseUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Customer__Update__440B1D61");

                    b.Navigation("CountryCodeNavigation");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("Role");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Domain.Models.Friendship", b =>
                {
                    b.HasOne("Domain.Models.Customer", "Addressee")
                        .WithMany("FriendshipAddressees")
                        .HasForeignKey("AddresseeId")
                        .IsRequired()
                        .HasConstraintName("FK__Friendshi__Addre__48CFD27E");

                    b.HasOne("Domain.Models.Customer", "Requester")
                        .WithMany("FriendshipRequesters")
                        .HasForeignKey("RequesterId")
                        .IsRequired()
                        .HasConstraintName("FK__Friendshi__Reque__47DBAE45");

                    b.Navigation("Addressee");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("Domain.Models.FriendshipStatus", b =>
                {
                    b.HasOne("Domain.Models.Customer", "Specified")
                        .WithMany("FriendshipStatuses")
                        .HasForeignKey("SpecifiedId")
                        .IsRequired()
                        .HasConstraintName("FK__Friendshi__Speci__5070F446");

                    b.HasOne("Domain.Models.Status", "StatusCodeNavigation")
                        .WithMany("FriendshipStatuses")
                        .HasForeignKey("StatusCode")
                        .IsRequired()
                        .HasConstraintName("FK__Friendshi__Statu__778AC167");

                    b.HasOne("Domain.Models.Friendship", "Friendship")
                        .WithMany("FriendshipStatuses")
                        .HasForeignKey("RequesterId", "AddresseeId")
                        .IsRequired()
                        .HasConstraintName("FriendshipStatusToFriendship_FK");

                    b.Navigation("Friendship");

                    b.Navigation("Specified");

                    b.Navigation("StatusCodeNavigation");
                });

            modelBuilder.Entity("Domain.Models.Movie", b =>
                {
                    b.HasOne("Domain.Models.Customer", "CreatedByNavigation")
                        .WithMany("MovieCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__Movie__Created_b__619B8048");

                    b.HasOne("Domain.Models.Customer", "DeletedByNavigation")
                        .WithMany("MovieDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__Movie__Deleted_b__6383C8BA");

                    b.HasOne("Domain.Models.MovieRating", "RatingNavigation")
                        .WithMany("Movies")
                        .HasForeignKey("Rating")
                        .HasConstraintName("Movie_FK1");

                    b.HasOne("Domain.Models.Customer", "UpdatedByNavigation")
                        .WithMany("MovieUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Movie__Updated_b__628FA481");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("RatingNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Domain.Models.MovieCast", b =>
                {
                    b.HasOne("Domain.Models.Actor", "Actor")
                        .WithMany("MovieCasts")
                        .HasForeignKey("ActorId")
                        .IsRequired()
                        .HasConstraintName("FK__Movie_Cas__Actor__6B24EA82");

                    b.HasOne("Domain.Models.Movie", "Movie")
                        .WithMany("MovieCasts")
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK__Movie_Cas__Movie__6C190EBB");

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Domain.Models.Review", b =>
                {
                    b.HasOne("Domain.Models.Customer", "CreatedByNavigation")
                        .WithMany("ReviewCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__Review__Created___71D1E811");

                    b.HasOne("Domain.Models.Customer", "Customer")
                        .WithMany("ReviewCustomers")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("Review_FK1");

                    b.HasOne("Domain.Models.Customer", "DeletedByNavigation")
                        .WithMany("ReviewDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__Review__Deleted___73BA3083");

                    b.HasOne("Domain.Models.Movie", "Movie")
                        .WithMany("Reviews")
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("Review_FK2");

                    b.HasOne("Domain.Models.Customer", "UpdatedByNavigation")
                        .WithMany("ReviewUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Review__Updated___72C60C4A");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Customer");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("Movie");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Domain.Models.Staff", b =>
                {
                    b.HasOne("Domain.Models.Country", "NationalityNavigation")
                        .WithMany("Staff")
                        .HasForeignKey("Nationality")
                        .HasConstraintName("FK__Staff__Nationali__0B91BA14");

                    b.HasOne("Domain.Models.StaffRole", "StaffRole")
                        .WithMany("Staff")
                        .HasForeignKey("StaffRoleId")
                        .IsRequired()
                        .HasConstraintName("FK__Staff__Staff_rol__0C85DE4D");

                    b.Navigation("NationalityNavigation");

                    b.Navigation("StaffRole");
                });

            modelBuilder.Entity("Domain.Models.UserList", b =>
                {
                    b.HasOne("Domain.Models.Customer", "CreatedByNavigation")
                        .WithMany("UserListCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("User_List_FK4");

                    b.HasOne("Domain.Models.Customer", "Customer")
                        .WithMany("UserListCustomers")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("User_List_FK1");

                    b.HasOne("Domain.Models.Customer", "DeletedByNavigation")
                        .WithMany("UserListDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("User_List_FK6");

                    b.HasOne("Domain.Models.Movie", "Movie")
                        .WithMany("UserLists")
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("User_List_FK2");

                    b.HasOne("Domain.Models.Customer", "UpdatedByNavigation")
                        .WithMany("UserListUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("User_List_FK5");

                    b.HasOne("Domain.Models.UserListStatus", "UserListStatus")
                        .WithMany("UserLists")
                        .HasForeignKey("UserListStatusId")
                        .IsRequired()
                        .HasConstraintName("User_List_FK3");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Customer");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("Movie");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("UserListStatus");
                });

            modelBuilder.Entity("MovieGenre", b =>
                {
                    b.HasOne("Domain.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .IsRequired()
                        .HasConstraintName("Movie_Genres_FK2");

                    b.HasOne("Domain.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("Movie_Genres_FK1");
                });

            modelBuilder.Entity("MovieLanguage", b =>
                {
                    b.HasOne("Domain.Models.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .IsRequired()
                        .HasConstraintName("Movie_Languages_FK2");

                    b.HasOne("Domain.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("Movie_Languages_FK1");
                });

            modelBuilder.Entity("MovieStaff", b =>
                {
                    b.HasOne("Domain.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK__Movie_Sta__Movie__68487DD7");

                    b.HasOne("Domain.Models.Staff", null)
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("FK__Movie_Sta__Staff__03F0984C");
                });

            modelBuilder.Entity("ProductionCountry", b =>
                {
                    b.HasOne("Domain.Models.Country", null)
                        .WithMany()
                        .HasForeignKey("CountryCode")
                        .IsRequired()
                        .HasConstraintName("Production_Country_FK2");

                    b.HasOne("Domain.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("Production_Country_FK1");
                });

            modelBuilder.Entity("Domain.Models.Actor", b =>
                {
                    b.Navigation("MovieCasts");
                });

            modelBuilder.Entity("Domain.Models.Country", b =>
                {
                    b.Navigation("Actors");

                    b.Navigation("Customers");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Domain.Models.Customer", b =>
                {
                    b.Navigation("FriendshipAddressees");

                    b.Navigation("FriendshipRequesters");

                    b.Navigation("FriendshipStatuses");

                    b.Navigation("InverseCreatedByNavigation");

                    b.Navigation("InverseDeletedByNavigation");

                    b.Navigation("InverseUpdatedByNavigation");

                    b.Navigation("MovieCreatedByNavigations");

                    b.Navigation("MovieDeletedByNavigations");

                    b.Navigation("MovieUpdatedByNavigations");

                    b.Navigation("ReviewCreatedByNavigations");

                    b.Navigation("ReviewCustomers");

                    b.Navigation("ReviewDeletedByNavigations");

                    b.Navigation("ReviewUpdatedByNavigations");

                    b.Navigation("UserListCreatedByNavigations");

                    b.Navigation("UserListCustomers");

                    b.Navigation("UserListDeletedByNavigations");

                    b.Navigation("UserListUpdatedByNavigations");
                });

            modelBuilder.Entity("Domain.Models.Friendship", b =>
                {
                    b.Navigation("FriendshipStatuses");
                });

            modelBuilder.Entity("Domain.Models.Movie", b =>
                {
                    b.Navigation("MovieCasts");

                    b.Navigation("Reviews");

                    b.Navigation("UserLists");
                });

            modelBuilder.Entity("Domain.Models.MovieRating", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("Domain.Models.Role", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Domain.Models.StaffRole", b =>
                {
                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Domain.Models.Status", b =>
                {
                    b.Navigation("FriendshipStatuses");
                });

            modelBuilder.Entity("Domain.Models.UserListStatus", b =>
                {
                    b.Navigation("UserLists");
                });
#pragma warning restore 612, 618
        }
    }
}
